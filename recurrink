#!/usr/bin/env python

import os
import sys
import re
import random
import argparse
import pprint
from block import BlockData, Views, TmpFile, Flatten
from block.make import GeoMaker
from model import ModelData, Grid, Svg, LinearSvg
'''
from model import ModelData, Grid
from model.svg import Svg, LinearSvg
'''
pp = pprint.PrettyPrinter(indent=2)
m = ModelData()
v = Views()
friendly_name = ['universal', 'colour45', 'htmstarter', 'jeb', 'whitebossa', 'snowbg', 'solar']
WORKDIR       = '/home/gavin/Dropbox/familia/rinks'
PUBDIR        = '/home/gavin/Pictures/pubq'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def inputs():
  ''' get inputs from command line
  '''
  parser = argparse.ArgumentParser(prog='recurrink')
  subparsers = parser.add_subparsers(dest='keyword', help='sub-command help')
  parser_l = subparsers.add_parser('list', help='list models in db')
  parser_r = subparsers.add_parser('read', help='get view metadata')
  parser_r.add_argument('-m', '--model', help='name of base model')
  parser_r.add_argument("-v", "--view", help='hex name with 32 char')
  parser_i = subparsers.add_parser('init', help='set config for new image')
  parser_i.add_argument('-m', '--model', help='name of base model')
  parser_i.add_argument(
   "-p", "--palette", help='palette version', type=int, choices=range(1, 10)
  )
  parser_k = subparsers.add_parser('clone', help='get copy of config')
  parser_k.add_argument("-v", "--view", help='view to clone', required=True)
  parser_c = subparsers.add_parser('commit', help='write immutable entry to db')
  parser_c.add_argument('-m', '--model', help='name of base model')
  parser_c.add_argument( 
    "-a", "--author", choices=['human', 'machine'], required=True
  )
  parser_c.add_argument(
    "-s", "--scale", help="zoom control 0.5 - 2.0", required=True
  )
  parser_d = subparsers.add_parser('delete')
  parser_d.add_argument("-v", "--view", help='view to remove from db')
  parser_u = subparsers.add_parser('update', help='update svg from config')
  parser_u.add_argument('-m', '--model', help='name of model to update')
  parser_u.add_argument("-s", "--scale",  help="zoom control 0.5 - 2.0")
  parser_u.add_argument(
    "--mm",  help="output for plotter", action=argparse.BooleanOptionalAction
  )
  parser_f = subparsers.add_parser(
    'flatten', help='write svg formatted for plotter'
  )
  parser_f.add_argument(
    "-s", "--scale", help='scale to plot clone .6 1 2', required=False
  )
  parser_f.add_argument(
    "-w", "--wireframe", help="flatten as wireframe", 
    action=argparse.BooleanOptionalAction
  )
  parser_f.add_argument(
    "-y", "--yaml", help='init conf/MODEL.yaml', 
    action=argparse.BooleanOptionalAction
  )
  parser_p = subparsers.add_parser('release', help='add release date to db')
  parser_p.add_argument("-v", "--view", help='view to mark as released')
  return parser.parse_args()

def stats():
  ''' pretty list of models
  '''
  return m.stats()

def info(model=None, digest=None):
  ''' accept a view id e.g. c364ab54ff542adb322dc5c1d6aa4cc8
      return view meta data for publisher to use
      OR a text visualisation of a model
  '''
  out = str()
  if model:
    b  = BlockData(model)
    xy = m.read(model=model)[2]
    positions = b.readPositions(model)
    for y in range(xy[1]):
      for x in range(xy[0]):
        p = tuple([x, y])
        cell = positions[p][0]
        top = positions[p][1] if positions[p][1] else '-'
        print(cell + top, end=' ')
      print()
  elif digest:
    view = v.readMeta(digest=digest)
    out = " ".join(view[:2])
  else:
    pass # expected either a model or digest as input but whatever ..
  return out or sys.exit(1)

def clone(digest):
  ''' generate tmp files from existing database entry
  '''
  celldata = v.read(digest=digest, output=list())
  model, _, scale, ver = v.readMeta(digest=digest) # author for publishng only
  palette = friendly_name[ver]
  tf.conf(model, palette) # conf state is a symlink
  tf.write(model, celldata)
  return f"cloning {digest} with {len(celldata)} cells\nmodel {model}\npalette {friendly_name[ver]}\nscale {scale}"

def init(model=None, ver=None):
  ''' init generates editable tmp files 
  '''
  src = None
                                 # anythin but universal is the palette
  ver = int(ver) if ver else random.choice(range(1, 6)) 
  model, src, celldata = v.generate(model=model, ver=ver) if model else v.generate(ver)
  palette = friendly_name[ver]
  tf.conf(model, palette) # conf state is a symlink
  celldata = tf.convert_to_list(celldata) # become a list before writing
  tf.write(model, celldata)
  return f"initialising {model} with {len(celldata)} cells from {src}\npalette {friendly_name[ver]}"
 
def update(model, scale, mm=False):
  ''' generate an SVG using ElementTree
  '''
  model_conf, palette = tf.conf()
  model = model_conf if model is None else model
  ver = friendly_name.index(palette)
  s = float(scale) if scale else m.getScale(model)
  blocksize = m.read(model=model)[2] # can get scale too
  b = BlockData(model)
  svgfile = f'tmp/{model}.svg'
  positions = b.readPositions(model)
  # TODO millimetres are handled by flatten()
  unit = 'mm' if mm else 'px'
  svg  = Svg(unit=unit, scale=s)
  #print(f"s {svg.scale} c {svg.cellsize} g {svg.cellnum}")
  cells = tf.read(model, output=dict())
  v.validate(cells, ver=ver)

  gm = GeoMaker(scale=s, cellsize=svg.cellsize)
  block1  = gm.makeCells(blocksize, positions, cells)
  svg.styleGuide(block1)
  svg.gridWalk(blocksize, block1)
  svg.svgDoc(legacy=True)
  '''
  pp.pprint(svg.doc)
  '''
  svg.make()
  svg.write(svgfile)
  return f"{svgfile} {s}"

def ___update(model, scale, mm=False):
  ''' generate an SVG using ElementTree
  '''
  model_conf, palette = tf.conf()
  model = model_conf if model is None else model
  ver = friendly_name.index(palette)
  s = float(scale) if scale else m.getScale(model)
  blocksize = m.read(model=model)[2] # can get scale too
  b = BlockData(model)
  svgfile = f'tmp/{model}.svg'
  positions = b.readPositions(model)
  # TODO millimetres are handled by flatten()
  unit = 'mm' if mm else 'px'
  svg  = Svg(unit=unit, scale=s)
  #print(f"s {svg.scale} c {svg.cellsize} g {svg.cellnum}")
  cells = tf.read(model, output=dict())
  v.validate(cells, ver=ver)
  svg.gridwalk(blocksize, positions, cells)
  pp.pprint(svg.doc)
  svg.make()
  svg.write(svgfile)
  return f"{svgfile} {s}"

def flatten(scale, yaml=False, wireframe=False):
  ''' once cloned use flatten to make an SVG for plotting
      testing '7e731bfc1863c186616d2b3de09a9b6b' 
  '''
  f         = Flatten()
  s         = float(scale) if scale else 1.0
  msg       = str()
  model, _  = tf.conf()  # ignore palette
  b         = BlockData(model)
  blocksize = m.read(model=model)[2] # can get scale too
  positions = b.readPositions(model)
  svg       = LinearSvg(scale=s) # unit is millimetres
  cells     = tf.read(model, output=dict())
  gm      = GeoMaker(cellsize=15)
  block1  = gm.make(blocksize, positions, cells)
  #pp.pprint(cells)
  if yaml: # print conf
    '''
    svg.gridwalk(blocksize, positions, cells)
    cell_conf, block1 = svg.blockOne()  # TODO remove cell_conf
    msg               = cell_conf + meander_conf
      block1  = todo.pop(0)
    '''
    f.run(block1)
    meander_conf      = svg.wireframe(f.done, writeconf=True)
    msg               = meander_conf
  else:
    #todo = grid.walk(blocksize, conf['cells'])
    if wireframe:             # first block only
      svgfile = f'tmp/{model}_wf.svg'
      f.run(block1)
      svg.wireframe(f.done)
    else:                     # send all the blocks
      mc = tf.modelConf(model, 'meander')
      grid = Grid(scale=s)    # cellsize=3 gridsize=9
      blox = grid.walk(blocksize, block1)
      squished = []
      for b in blox:
        f = Flatten()    # runs slow without new instance
        squished.append(f.run(b))
      print(f"{len(squished)=}")
      svgfile = svg.make(model, squished, meander_conf=mc)
    svg.write(svgfile)
    msg = f"""
added {f.stats[0]} merged {f.stats[1]} cropped {f.stats[2]} ignored {f.stats[3]} punched {f.stats[4]}
TOTAL {len(f.done)} {svgfile} {s}
"""
  return msg

def delete(view):
  ''' both svg and view must exist for the delete to succeed
  '''
  viewdata = v.readMeta(view)
  if len(viewdata):
    v.delete(view) 
    model = viewdata[0]
    if os.path.isfile(f'{PUBDIR}/{view}.svg'):
      os.unlink(f'{PUBDIR}/{view}.svg')
    if os.path.isfile(f'{WORKDIR}/{model}/{view}.svg'):
      os.unlink(f'{WORKDIR}/{model}/{view}.svg')
      return view # success
    raise FileNotFoundError(f'SVG not deleted {model}/{view}')
  raise ValueError(f'nothing named {view} in database')
  return None

def commit(model, scale, author):
  ''' read config, write to database and return digest
      clean file system except for tmp/model.txt
  '''
  model_conf, palette = tf.conf()
  model = model_conf if model is None else model
  ver = friendly_name.index(palette)
  scale = scale if scale else m.get_scale(model)
  celldata = tf.read(model, output=list())
  cellhash = tf.read(model, output=dict()) # re-read the data as dict
  '''
  s = Stencil(cellhash)
  lc = len(s.colours())
  '''
  lc = -1  # TODO need to redo these
  if os.path.isdir(f"{WORKDIR}/{model}"):
    if v.create(
      tf.digest, celldata, model=model, author=author, 
      ver=ver, scale=scale,colournum=lc
    ):
      #[c.create(tf.digest, row) for row in celldata]
      if os.path.isfile(f"tmp/{model}.svg"):
        svgname = f"{WORKDIR}/{model}/{tf.digest}.svg"
        os.rename(f"tmp/{model}.svg", svgname)
        os.symlink(f"{svgname}", f"{PUBDIR}/{tf.digest}.svg")
        response = svgname
      else:
        raise FileNotFoundError(f"{model}.svg not found in tmp")
    else:
      response = 'unknown error'
  else:
    raise FileNotFoundError(f"{model} not found in {WORKDIR}")
  return response

def release(d):
  v.update(d)
  return f"released today: {d}"

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
if __name__ == '__main__':
  tf = TmpFile()
  args = inputs()
  if (args.keyword == 'list'):
    print(stats())
  elif (args.keyword == 'read'):
    print(info(model=args.model, digest=args.view))
  elif (args.keyword == 'init'):
    print(init(model=args.model, ver=args.palette))
  elif (args.keyword == 'commit'):
    print(commit(args.model, args.scale, args.author))
  elif (args.keyword == 'delete'):
    print(delete(args.view))
  elif (args.keyword == 'update'):
    print(update(args.model, args.scale, mm=args.mm))
  elif (args.keyword == 'release'):
    print(release(args.view))
  elif (args.keyword == 'flatten'):
    print(flatten(args.scale, args.yaml, wireframe=args.wireframe))
  elif (args.keyword == 'clone'):
    print(clone(args.view))
'''
the 
end
'''
