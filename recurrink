#!/usr/bin/env python3

import os
import sys
import re
import argparse
import pprint
from db import Views, Models, Blocks, Cells
from svgfile import Layout, Stencil
from tmpfile import TmpFile

pp = pprint.PrettyPrinter(indent=2)
m = Models()
v = Views()
c = Cells()
WORKDIR = '/home/gavin/Dropbox/familia/rinks'
PUBDIR = '/home/gavin/Pictures/pubq'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def inputs():
  ''' get inputs from command line
  '''
  parser = argparse.ArgumentParser(prog='recurrink')
  subparsers = parser.add_subparsers(dest='keyword', help='sub-command help')
  parser_l = subparsers.add_parser('list', help='list models in db')
  parser_r = subparsers.add_parser('read', help='get view metadata')
  parser_r.add_argument('-m', '--model', help='name of base model')
  parser_r.add_argument("-v", "--view", help='hex name with 32 char')
  parser_i = subparsers.add_parser('init', help='set config for new image')
  parser_i.add_argument('-m', '--model', help='name of base model')
  parser_i.add_argument("-v", "--view", help='view to clone')
  parser_c = subparsers.add_parser('commit', help='write immutable entry to db')
  parser_c.add_argument('-m', '--model', help='name of base model', required=True)
  parser_c.add_argument("-a", "--author", choices=['human', 'machine'], required=True)
  parser_c.add_argument("-s", "--scale", help="zoom control 0.5 - 2.0")
  parser_d = subparsers.add_parser('delete')
  parser_d.add_argument("-v", "--view", help='view to remove from db')
  parser_u = subparsers.add_parser('update', help='update svg from config')
  parser_u.add_argument('-m', '--model', help='name of model to update', required=True)
  parser_u.add_argument("-s", "--scale",  help="zoom control 0.5 - 2.0")
  parser_s = subparsers.add_parser('stencil', help='monochrome to etch screens')
  parser_s.add_argument("-v", "--view", help='view to make stencils from')
  return parser.parse_args()

def stats():
  ''' pretty list of models
  '''
  return m.stats()

def info(model=None, digest=None):
  ''' accept a view id e.g. c364ab54ff542adb322dc5c1d6aa4cc8
      return view meta data for publisher to use
      OR a pretty text visualation of a model
  '''
  out = str()
  if model:
    posdata = m.positions(model)
    # pp.pprint(posdata)
    for row in posdata:
      for col in row:
        out += col + ' '
      out += "\n"
  elif digest:
    view = v.read(digest=digest)
    out = " ".join(view[:2])
  else:
    pass # expected either a model or digest as input but whatever ..
  return out or sys.exit(1)

def init(model=None, digest=None):
  ''' after init create SVG by calling svgfile
  '''
  scale = None
  src = ""
  if digest:
    src = digest
    celldata = v.read(digest=digest, celldata=True, output=list())
    model, _, scale = v.read(digest=digest)
  elif model:
    _, src, celldata = v.generate(model=model)
    celldata = tf.convert_to_list(celldata) # dict becomes a list before writing
  else:
    model, src, cellrows = v.generate()
    celldata = tf.convert_to_list(cellrows) 
  tf.write(model, celldata)
  mesg = f"initialising {model} with {len(celldata)} cells from {src}"
  if scale:
    mesg += f" scale at {scale}"
  return mesg
 
def update(model, scale):
  ''' generate an SVG using ElementTree
  '''
  m = Models()
  s = float(scale) if scale else m.get_scale(model)
  blocksize = m.read(model=model)[2] # can get scale too
  b = Blocks(model)
  svgfile = f'/tmp/{model}.svg'
  positions = b.read()
  lt = Layout(scale=s)
  #print(f"s {lt.scale} c {lt.cellsize} g {lt.grid}")
  cells = tf.read(model, output=dict())
  c.validate(cells)
  lt.gridwalk(blocksize, positions, cells)
  lt.write(svgfile)
  return f"{svgfile} {s}"

def delete(view):
  ''' both svg and view must exist for the delete to succeed
  '''
  viewdata = v.read(view)
  if len(viewdata):
    v.delete(view) 
    model = viewdata[0]
    if os.path.isfile(f'{PUBDIR}/{view}.svg'):
      os.unlink(f'{PUBDIR}/{view}.svg')
    if os.path.isfile(f'{WORKDIR}/{model}/{view}.svg'):
      os.unlink(f'{WORKDIR}/{model}/{view}.svg')
      return view # success
    raise FileNotFoundError(f'SVG not deleted {model}/{view}')
  raise ValueError(f'nothing named {view} in database')
  return None

def commit(model, scale, author):
  ''' read config, write to database and return digest
      clean file system except for /tmp/model.txt
  '''
  scale = scale if scale else m.get_scale(model)
  celldata = tf.read(model, output=list())
  cellhash = tf.read(model, output=dict()) # read the data again, but as a dictionary
  s = Stencil(model, cellhash)
  lc = len(s.colours())
  if os.path.isdir(f"{WORKDIR}/{model}"):
    if v.create(model, tf.digest, author, scale=scale, colournum=lc):
      [c.create(tf.digest, row) for row in celldata]
      if os.path.isfile(f"/tmp/{model}.svg"):
        svgname = f"{WORKDIR}/{model}/{tf.digest}.svg"
        os.rename(f"/tmp/{model}.svg", svgname)
        os.symlink(f"{svgname}", f"{PUBDIR}/{tf.digest}.svg")
        response = svgname
      else:
        raise FileNotFoundError(f"{model}.svg not found in /tmp")
    else:
      response = 'unknown error'
  else:
    raise FileNotFoundError(f"{model} not found in {WORKDIR}")
  return response

def stencil(d):
  model, _, scale = v.read(digest=d)
  cells = v.read(digest=d, celldata=True)
  blocksize = m.read(model=model)[2] # can get scale too
  b = Blocks(model)
  positions = b.read()
  scale = float(scale) if scale else m.get_scale(model)
  lt = Layout(scale=scale)
  s = Stencil(model, cells)
  for colour in s.colours():
    fn = f"{model}_{colour}"
    print(fn)
    bwdata = s.monochrome(colour, cells)
    #pp.pprint(bwdata)
    lt.gridwalk(blocksize, positions, bwdata)
    lt.write(f'/tmp/{fn}.svg')
  #pp.pprint(s.colmap)
  return f"{WORKDIR}/{model}/{d}\n"
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
if __name__ == '__main__':
  tf = TmpFile()
  args = inputs()
  if (args.keyword == 'list'):
    print(stats())
  elif (args.keyword == 'read'):
    print(info(model=args.model, digest=args.view))
  elif (args.keyword == 'init'):
    print(init(model=args.model, digest=args.view))
  elif (args.keyword == 'commit'):
    print(commit(args.model, args.scale, args.author))
  elif (args.keyword == 'delete'):
    print(delete(args.view))
  elif (args.keyword == 'update'):
    print(update(args.model, args.scale))
  elif (args.keyword == 'stencil'):
    print(stencil(args.view))
  '''
  the 
  end
  '''
