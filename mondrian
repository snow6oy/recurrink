#!/bin/bash
workdir=/home/gavin/Pictures/artWork/recurrences

# use randmoness to automatically select a model for recurrink to process
rndmodel() {
  model=$(./recurrink.py --random)
  echo $model
}

rndfactor() {
  # scaling is weighted in favour of 1:1
  declare -a a=(0.5 0.75 1.0 1.5 2.0)
  i=$((0 + $RANDOM % 5))
  echo ${a[$i]}
}

mkcsv() {
  # echo "mkcsv" $m $a
  model=$m
  if [ "$a" == 'machine' ]
  then
    cells=$(./recurrink.py -m ${model} --output CSV --random)
  elif [ "$a" == 'human' ]
  then
    cells=$(./recurrink.py -m ${model} --output CSV)
  else
    usage
  fi

  if [ -z "${cells}" ]  # although cells are thrown away, they signify success
  then
    echo "error: cannot find cells"
    exit 1
  else
    echo ${cells}
  fi
}

mkjson() {
  # echo "mkjson" $m $a
  # symlink is a promise that will be fulfilled when /tmp/MODEL.json is approved
  model=$m
  if [ "$a" == 'machine' ]
  then
    digest=$(./recurrink.py -m ${model} --output JSON --random)
    ln -s "$workdir/$model/m/$digest.json" /tmp/rink.pid
  elif [ "$a" == 'human' ]
  then
    digest=$(./recurrink.py -m ${model} --output JSON)
    ln -s "$workdir/$model/h/$digest.json" /tmp/rink.pid 
  else
    usage
  fi
  echo $digest
}

mksvg() {
  pid=/tmp/rink.pid
  if [[ -L "${pid}" ]]
  then 
    model=`readlink $pid | awk -v FS='/' '{print $7}'`
    view=`readlink $pid | awk -v FS='/' '{print $9}'`
    view="${view/.json/}"
    # echo "/tmp/${model}.rink"
    ./recurrink.py -m ${model} --output RINK --view ${view}
  else
    echo "error: $0 -i needs ${pid}"
    exit 1
  fi
}

updsvg() {
  # echo "mksvg" $m
  model=$m
  cells=$(./recurrink.py -m ${model} --output CELL)

  for cell in ${cells}
  do
    attrs=$(./recurrink.py -m ${model} --cell ${cell})
    a=($attrs)  # convert to array with the magic of IFS separator
    echo -n "${cell} ${a[2]}" 
    # update cells
    # 0    1     2     3          4            5    6  7            8      9            0                1              2
    # cell,model,shape,shape_size,shape_facing,fill,bg,fill_opacity,stroke,stroke_width,stroke_dasharray,stroke_opacity,top
  ./effect.py \
     --id ${cell}1 \
     --output /tmp/${model}.svg \
     --shape ${a[2]} \
     --size ${a[3]} \
     --facing ${a[4]} \
     --fill ${a[5]} \
     --bg ${a[6]} \
     --opacity ${a[7]} \
     --stroke ${a[8]} \
     --width ${a[9]} \
     --dash ${a[10]} \
     --top ${a[12]} /tmp/${model}.svg
  done
}

mkinstall() {

  pid=/tmp/rink.pid
  dbentry=`readlink $pid`
  pubdir=/home/gavin/Pictures/pubq

  if [[ -L "${pid}" ]]
  then 
    model=`readlink $pid | awk -v FS='/' '{print $7}'`
    # echo $model
    if [ -f "/tmp/${model}.svg" ]
    then
      svgname="${dbentry/json/svg}"
      echo ${svgname}
      mv "/tmp/${model}.svg" ${svgname}
      ln -s ${svgname} ${pubdir}
    fi
  else
    echo "error: $0 -i needs ${pid}"
    exit 1
  fi
}

n=0; f=0; c=0; j=0; s=0; u=0; i=0

usage() { 
  echo "Usage: $0
	-n 			get random model name
	-f 			get random factor
	-c -m MODEL -a AUTH	make csv
	-j -m MODEL -a AUTH	make json
	-s -m MODEL        	make svg
	-u -m MODEL        	update svg
	-i 			install svg in pubq
" 1>&2; exit 1; 
}

while getopts "nfcjsuim:a:" o; do
  case "${o}" in
    a)
      a=${OPTARG}
      ;;
    m)
      m=${OPTARG}
      ;;
    n)
      n=1
      ;;
    f)
      f=1
      ;;
    c)
      c=1
      ;;
    j)
      j=1
      ;;
    s)
      s=1
      ;;
    u)
      u=1
      ;;
    i)
      i=1
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND-1))

if [ "${n}" -eq 1 ]
then
  rndmodel
elif [ "${f}" -eq 1 ]
then
  rndfactor
elif [ "${c}" -eq 1 ] && [ -n "${m}" ] && [ -n "${a}" ]
then
  mkcsv
elif [ "${j}" -eq 1 ] && [ -n "${m}" ] && [ -n "${a}" ]
then
  mkjson
elif [ "${s}" -eq 1 ] && [ -n "${m}" ]
then
  mksvg
elif [ "${u}" -eq 1 ] && [ -n "${m}" ]
then
  updsvg
elif [ "${i}" -eq 1 ]
then
  mkinstall
else
  usage
fi
