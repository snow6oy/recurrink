#!/bin/bash
workdir=/home/gavin/Pictures/artWork/recurrences

# use randmoness to automatically select a model for recurrink to process
rndmodel() {
  model_path=$(ls -1d ${workdir}/*| sort -R| tail -1)
  model=${model_path%.*}  # retain the part before the colon
  model=${model##*/}  # retain the part after the last slash
  echo $model
}

rndfactor() {
  # scaling is weighted in favour of 1:1
  declare -a a=(0.5 0.75 1.0 1.5 2.0)
  i=$((0 + $RANDOM % 5))
  echo ${a[$i]}
}

mkcsv() {
  # echo "mkcsv" $m $a
  model=$m
  if [ "$a" == 'machine' ]
  then
    cells=$(./recurrink.py -m ${model} --output CSV --random)
  elif [ "$a" == 'human' ]
  then
    cells=$(./recurrink.py -m ${model} --output CSV)
  else
    usage
  fi

  if [ -z "${cells}" ]  # although cells are thrown away, they signify success
  then
    echo "error: cannot find cells"
    exit 1
  else
    echo ${cells}
  fi
}

mkjson() {
  # echo "mkjson" $m $a
  # symlink is a promise that will be fulfilled when /tmp/MODEL.json is approved
  model=$m
  if [ "$a" == 'machine' ]
  then
    digest=$(./recurrink.py -m ${model} --output JSON --random)
    ln -s "$workdir/$model/m/$digest.json" /tmp/rink.pid
  elif [ "$a" == 'human' ]
  then
    digest=$(./recurrink.py -m ${model} --output JSON)
    ln -s "$workdir/$model/h/$digest.json" /tmp/rink.pid 
  else
    usage
  fi
  echo $digest
}

mksvg() {
  # echo "mksvg" $m
  model=$m
  cells=$(./recurrink.py -m ${model} --output CELL)

  for cell in ${cells}
  do
    attrs=$(./recurrink.py -m ${model} --cell ${cell})
    a=($attrs)  # convert to array with the magic of IFS separator
    shape=${a[2]} # elems 0,1 are cell and model names
    size=${a[3]}
    facing=${a[4]}
    bgcol=${a[6]}
    width=${a[9]}
    top=${a[12]}
    echo -n "${cell} ${shape}" 
    # update cells
    # echo "c ${cell},m ${model},s ${shape},w ${width},f ${facing},z ${size},b ${bgcol},t ${top}"
    # 0 1        2      3      4    5    6               7   8    9 0 1   2
    # a soleares circle medium west #fff mediumvioletred 1.0 #000 0 0 1.0 True
    # d,soleares,circle,1.0,south,large,white,False
  ./effect.py \
     --id ${cell}1 \
     --output /tmp/${model}.svg \
     --shape ${shape} \
     --width ${width} \
     --facing ${facing} \
     --size ${size} \
     --bg ${bgcol} \
     --top ${top} /tmp/${model}.svg
  done
}

mkinstall() {

  pid=/tmp/rink.pid
  dbentry=`readlink $pid`
  pubdir=/home/gavin/Pictures/pubq

  if [[ -L "${pid}" ]]
  then 
    model=`readlink $pid | awk -v FS='/' '{print $7}'`
    # echo $model
    if [ -f "/tmp/${model}.json" ]
    then
      echo ${dbentry}
      mv "/tmp/${model}.json" ${dbentry}
    fi
    if [ -f "/tmp/${model}.svg" ]
    then
      svgname="${dbentry/json/svg}"
      echo ${svgname}
      mv "/tmp/${model}.svg" ${svgname}
      ln -s ${svgname} ${pubdir}
    fi
  else
    echo "error: $0 -i needs ${pid}"
    exit 1
  fi
}

n=0; f=0; c=0; j=0; s=0; i=0

usage() { 
  echo "Usage: $0
	-n 			get random model name
	-f 			get random factor
	-c -m MODEL -a AUTH	make csv
	-j -m MODEL -a AUTH	make json
	-s -m MODEL        	make svg
	-i 			install json, svg to library
" 1>&2; exit 1; 
}

while getopts "nfcjsim:a:" o; do
  case "${o}" in
    a)
      a=${OPTARG}
      ;;
    m)
      m=${OPTARG}
      ;;
    n)
      n=1
      ;;
    f)
      f=1
      ;;
    c)
      c=1
      ;;
    j)
      j=1
      ;;
    s)
      s=1
      ;;
    i)
      i=1
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND-1))

if [ "${n}" -eq 1 ]
then
  rndmodel
elif [ "${f}" -eq 1 ]
then
  rndfactor
elif [ "${c}" -eq 1 ] && [ -n "${m}" ] && [ -n "${a}" ]
then
  mkcsv
elif [ "${j}" -eq 1 ] && [ -n "${m}" ] && [ -n "${a}" ]
then
  mkjson
elif [ "${s}" -eq 1 ] && [ -n "${m}" ]
then
  mksvg
elif [ "${i}" -eq 1 ]
then
  mkinstall
else
  usage
fi
